import React, { useState, useEffect } from 'react';
import { fabric } from 'fabric';

import {
  Row,
  Col,
} from 'antd';

import { getBase64 } from 'js/misc';
import Controls from '../Controls';

fabric.Object.prototype.centeredScaling = true;
fabric.Object.prototype.centeredRotation = true;
fabric.Object.prototype.transparentCorners = false;
fabric.Object.prototype.objectCaching = true;

const Canvas = () => {
  let canvas;
  useEffect(() => {
    canvas = new fabric.Canvas('canvas');
    canvas.setHeight(450);
    canvas.setWidth(450);
  });
  
  const [fileList, setFileList] = useState([]);
  const [previewImage, setPreviewImage] = useState(null);
  
  const handleFileListChange = ({ fileList }) => {
    setFileList(fileList);
  } 

  const handlePreview = async file => {
    if (!file.url && !file.preview) {
      file.preview = await getBase64(file.originFileObj);
    }
    setPreviewImage(file.url || file.preview);
  };

  const handleClear = () => {
    canvas.clear();
  }

  const handleAddSVGElement = () => {
    if (previewImage == null) return;

    fabric.loadSVGFromURL(previewImage, function(objects, options) {
      const svg = fabric.util.groupSVGElements(objects, options);
      canvas.add(svg.setControlsVisibility({
        mt: false,
        mb: false,
        ml: false,
        mr: false,
      }));
      canvas.renderAll();
    });
  }

  const handleClone = () => {
    const activeObjs = canvas.getActiveObject();
    console.log('activeObjs:', activeObjs)

    if (activeObjs != null) {
      activeObjs.clone((clone) => {
        canvas.add(clone.set({
          top: clone.top + 10,
          let: clone.left + 10,
        }).setControlsVisibility({
          mt: false,
          mb: false,
          ml: false,
          mr: false,
        }));
      });
    }
  }
  
  const handleRemove = () => {
    const activeObjects = canvas.getActiveObjects();

    canvas.discardActiveObject();
    if (activeObjects.length) {
      canvas.remove.apply(canvas, activeObjects);
    }
  }

  const handleSetBackground = async file => {
    if (previewImage == null) return;

    canvas.backgroundColor = new fabric.Pattern({
        source: previewImage,
        repeat: 'repeat',
      }, () => {
        canvas.renderAll();
    });
  }

  const handleSelectAll = () => {
    canvas.discardActiveObject();
    const sel = new fabric.ActiveSelection(canvas.getObjects(), {
      canvas,
    });
    canvas.setActiveObject(sel.setControlsVisibility({
      mt: false,
      mb: false,
      ml: false,
      mr: false,
    }));
    canvas.requestRenderAll();
  }

  const handleDiscard = () => {
    canvas.discardActiveObject();
    canvas.requestRenderAll();
  }

  const handleGroup = () => {
    if (!canvas.getActiveObject()) {
      return;
    } else if (canvas.getActiveObject().type === 'group') {
      canvas.getActiveObject().toActiveSelection().setControlsVisibility({
        mt: false,
        mb: false,
        ml: false,
        mr: false,
      });
      canvas.requestRenderAll();
    } else if (canvas.getActiveObject().type === 'activeSelection') {
      canvas.getActiveObject().toGroup().setControlsVisibility({
        mt: false,
        mb: false,
        ml: false,
        mr: false,
      });
      canvas.requestRenderAll();
    }
  }

  return (
    <Row gutter={16}>
      <Col span={12}>
        <h4>Canvas</h4>
        <canvas id="canvas"></canvas>
      </Col>
      <Col span={12}>
        <Controls
          id="canvas-controls"
          onPreview={handlePreview}
          onSelectAll={handleSelectAll}
          onSetBackground={handleSetBackground}
          onAddSVGElement={handleAddSVGElement}
          onClear={handleClear}
          onClone={handleClone}
          onRemove={handleRemove}
          onDiscard={handleDiscard}
          onGroup={handleGroup}
          fileList={fileList}
          onFileListChange={handleFileListChange}
        />
      </Col>
    </Row>
  );
};

export default Canvas;